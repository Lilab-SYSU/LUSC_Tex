s
s <- extractFeatures(res)
s
genesscore <- featureScore(res)
genesscore
names(=enesscore)
names(senesscore)
names(genesscore)
head(names(genesscore))
head(rownames(esGolub))
s
sort(genesscore)
len()
len(s)
length(s)
length(s[[1]])
length(s[[2]])
length(s[[3]])
head(datq)
head(data)
paste0("mk",'dir')
paste0("mk",'dir','f')
wd = getwd()
wd
230*267
library(ggplot2)
5.339251e+03
library(KEGGREST)
library(dplyr)
hsa=keggList("hsa")
keggLink("pathway", "hsa")
library(limma)
?eBayes
library(ggplot2)
library(ggplot2)
library(ggplot2)
?annotate
library(ggplot2)
?geom_smooth
dat <- read.table('clipboard')
dat <- read.table('clipboard',header=T,sep="\t")
head(dat)
dat[,5]
ru=dat[,5]
nian=dat[,6]
head(ru)
head(nian)
gsub('-.*','',ru)
run=gsub('-.*','',ru)
nian1=gsub('-.*','',nian)
nian1
as.numeric(nian1)
nian2=as.numeric(nian1)
run2=as.numeric(run)
run2
c=run2 - nian2
c
c < 18
dat[c <= 18,]
library(NMF)
?nmf
install.packages('irr')
library(irr)
strsplit('_','TCGA_b')
strsplit('TCGA_b','_')
class(t)
a=c(1,2,3)
class(a)
dat <- read.table('clipboard',header=T)
dat <- read.table('clipboard',header=T,row.names = 1)
dat <- read.table('clipboard',header=T,row.names = 1,sep="\t")
head(dat)
datT <- as.data.frame(scale(dat))
head(datT)
datT$aDC
scale(dat$aDC)
write.csv(datT,file="ssGSEA_score_scale.csv")
getwd()
BiocManager::install('limma')
dat <- read.table('clipboard')
head(dat)
dat <- read.table('clipboard',header=T)
head(dat)
t.test(dat[,1],dat[,2],paired = T)
library(GEOquery)
gds <- getGEO('GSE95728')
pData(gds)
pData(gds[[1]])
Meta(gds)$platform
q()
q()
q()
gsub('_.*','','GSM1385177_E80_251485073538_1_3.txt')
gsub('_.*','',c('GSM1385177_E80_251485073538_1_3.txt','GSM1385177_E80_251485073538_1_3.txt'))
library(devtools)
install_github("XinleiChen001/cytofexplorer",force=T)
install_github("XinleiChen001/cytofexplorer",force=T)
install_github("XinleiChen001/cytofexplorer",force=T)
library(ggpubr)
uninstall('tibble')
remove.packages(tibble)
install_github("XinleiChen001/cytofexplorer",force=T)
install.packages('Rtools')
install_github("XinleiChen001/cytofexplorer",force=T)
install.packages("C:/Users/YML/Desktop/cytofexplorer-master.tar.gz", repos = NULL, type = "source")
install.packages('reshape2')
install.packages("reshape2")
install.packages('car')
install.packages("car")
install.packages("car")
install.packages("C:/Users/YML/Desktop/cytofexplorer-master.tar.gz", repos = NULL, type = "source")
install.packages("colorRamps")
install.packages("ggthemes")
install.packages("C:/Users/YML/Desktop/cytofexplorer-master.tar.gz", repos = NULL, type = "source")
install.packages("remotes")
remotes::install_github("XinleiChen001/cytofexplorer")
install.packages('EpiDISH')
getwd()
install.packages('Biobase')
install.packages("BiocManager")
BiocManager::install(version='devel')
BiocManager::install("SingleR")
library(SingleR)
ref <- HumanPrimaryCellAtlasData()
BiocManager::install('celldex')
ref <- HumanPrimaryCellAtlasData()
BiocManager::install('SeuratData')
library(plotrix)
install.packages(plotrix)
install.packages('plotrix')
library(dplyr)
new_iris = arrange(iris,Sepal.Length)
head(new_iris)
y1 = new_iris$Sepal.Length[1:10]
x1_axis = 1:length(y1)
y2 = new_iris$Petal.Length[1:10]
x2_axis = 1:length(y2)
par(family='STKaiti')
twoord.plot(x1_axis, y1, x2_axis, y2,main = '双折线图')
library(plotrix)
twoord.plot(x1_axis, y1, x2_axis, y2,main = '双折线图')
dat <- read.table('clipboard',header=T)
head(dat)
dat <- read.table('clipboard',header=T)
head(dat)
library(ggplot2)
r1 <- ggplot(data=dat,aes(x=epoch))
r2 <- r1 + geom_point(aes(y=trainLoss, color=group), size=3)+geom_point(aes(y=valAcc, color=group), size=3)
r2
r2 <- r1 + geom_line(aes(y=trainLoss, color=group), size=3)+geom_line(aes(y=valAcc, color=group), size=3)
r2
r2 <- r1 + geom_line(aes(y=trainLoss, color=group), size=3)+geom_line(aes(y=valAcc, color=group), size=0.5)
r2
r2 <- r1 + geom_line(aes(y=trainLoss, color=group), size=1)+geom_line(aes(y=valAcc, color=group), size=1)
r2
r2 <- r1 + geom_line(aes(y=trainLoss, color=group), size=1)+geom_line(aes(y=valAcc), size=1)
r2
dat <- read.table('clipboard',header=T)
r2 <- r1 + geom_line(aes(y=trainLoss, color=group), size=1)+geom_line(aes(y=valAcc,color=group1), size=1)
r2
head(dat)
r2 <- r1 + geom_line(aes(y=trainLoss, color=group), size=1)+geom_line(aes(y=valAcc,color=group2), size=1)
r2
r1 <- ggplot(data=dat,aes(x=epoch))
r2 <- r1 + geom_line(aes(y=trainLoss, color=group), size=1)+geom_line(aes(y=valAcc,color=group2), size=1)
r2
library(plotly)
dat <- read.table('clipboard')
library(ggpubr)
devtools::install_github("sqjin/CellChat")
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("sqjin/CellChat")
install.packages('rlang')
install.packages("rlang")
devtools::install_github("sqjin/CellChat")
q()
q()
getwd()
q()
devtools::install_github("sqjin/CellChat")
install.packages('rlang')
install.packages('rlang')
devtools::install_github("sqjin/CellChat")
remove.packages('rlang')
library(rlang)
install.packages('rlang')
install.packages("rlang")
devtools::install_github("sqjin/CellChat")
devtools::install_github("sqjin/CellChat")
library(pheatmap)
dat <- read.table('clipboard',header=T)
dat <- read.table('clipboard',header=T,sep="\t")
head(dat)
pheatmap(dat,scale = "row")
pheatmap(dat)
dat <- read.table('clipboard',header=T,sep="\t",row.names = 1)
pheatmap(dat,scale = "row")
?scale
x <- matrix(1:10, ncol = 2)
x
scale(x)
sigmoid = function(x,a=1){1/(1+exp(-a*x))}
t(scale(t(dat)))
datScale=t(scale(t(dat)))
datScale1= sigmoid(datScale)
datScale1df = as.data.frame(datScale1)
pheatmap(datScale1df,scale = "row")
pheatmap(datScale1df)
pheatmap(datScale1df,fontsize = 0.2)
pdf('RSS_heatmap.pdf',width = 20)
pheatmap(datScale1df,fontsize = 0.5)
dev.off()
getwd()
dev.off()
pheatmap(datScale1df,fontsize = 0.5)
dev.off()
pdf('RSS_heatmap.pdf',width = 20)
pheatmap(datScale1df,fontsize = 0.5)
dev.off()
pdf('RSS_heatmap.pdf',width = 20)
pheatmap(datScale1df)
dev.off()
pdf('RSS_heatmap.pdf',height = 20)
pheatmap(t(datScale1df))
dev.off()
pdf('RSS_heatmap.pdf',height = 20)
pheatmap(t(datScale1df),fontsize_row = 1)
dev.off()
pdf('RSS_heatmap.pdf',height = 15)
pheatmap(t(datScale1df),fontsize_row = 2)
dev.off()
reg2<- read.table('clipboard',header=T)
head(reg2)
datScale1df[1:5,1:5]
dat[1:5,1:5]
dat <- read.table('clipboard')
head(dat)
dat[dat$V2>0,'group'] ="UP"
dat[dat$V2 <0,'group']="Down"
write.table(dat,file="test.xls",quote = F,sep="\t")
getwd()
library(GEOquery)
gds <- getGEO('GSE120691')
exprmat <- exprs(gds[[1]])
exprmat[1:5,1:5]
exprmat[1:5,]
exprmat <- exprs(gds[[1]])
exprmat[1:5,]
exprmat
gds
phenoData(gds[[1]])
phen(gds[[1]])
pData(phenoData(gds[[1]]))
phenodat = pData(phenoData(gds[[1]]))
write.table(phenodat,file="GSE120691_phenodata.xls",quote = F,sep="\t")
getwd()
gds <- getGEO('GSE152641')
library(GEOquery)
gds <- getGEO('GSE152641')
exprmat <- exprs(gds[[1]])
exprmat[1:5,]
phenodat = pData(phenoData(gds[[1]]))
head(phenodat)
write.table(phenodat,file="GSE152641_phenodata.xls",quote = F,sep="\t")
getwd()
gds <- getGEO('GSE145370')
gds <- getGEO('GSE145370')
dat <- read.table('clipboard',header=T)
dat <- read.table('clipboard',header=T,fill=T)
dat
dat <- read.table('clipboard',fill=T)
head(dat)
intersect(dat$V1,dat$V2)
length(intersect(dat$V1,dat$V2))
dim(dat)
dat
length(intersect(dat$V1,dat$V2))
intersect(dat$V1,dat$V2)
write.table(intersect(dat$V1,dat$V2),file="intersect_pathways.xls")
write.table(intersect(dat$V1,dat$V2),file="intersect_pathways.xls",quote = F,row.names = F,sep="\t")
library(data.table)
nmf <- fread('NMFconsushctree_cluster_group.xls')
genes <- c('MIR155HG','CD274','TGFB2','TCF7','MT3','DPP4','MX1','TOX')
fpkm <- fread('LGG_Symbols_TCGA_ALL_Samples.txt')
loc <- match(genes,fpkm$Genes)
fpkmgenes <- fpkm[loc,]
fpkmgenesloc <- match(nmf$samples,colnames(fpkmgenes))
fpkmgenesorder <- fpkmgenes[,..fpkmgenesloc]
fpkmgenesorderdf <- as.data.frame(fpkmgenesorder)
rownames(fpkmgenesorderdf) <- genes
fpkmgenesorderdfT <- t(fpkmgenesorderdf)
fpkmgenesorderdfT[1:5,1:5]
beta <- fread('Select_DMP_promoter_beta_value.csv')
beta[1:5,1:5]
diffmeth <- fread('select_DMP.csv')
loc1 <- match(genes,diffmeth$gene)
head(loc1)
cg <- diffmeth[loc1,]
cg[1:5,]
cgloc <- match(cg$CG,beta$CG)
cgBeta <- beta[cgloc,]
cgBeta[1:5,1:5]
cgBetaloc <- match(nmf$samples,colnames(cgBeta))
cgBetaOrder <- as.data.frame(cgBeta[,..cgBetaloc])
rownames(cgBetaOrder) <- genes
cgBetaOrderdfT <- t(as.data.frame(cgBetaOrder))
cgBetaOrderdfT[1:5,1:5]
plotdf <- data.frame(fpkm=log2(fpkmgenesorderdfT[,'MIR155HG']+1),beta=cgBetaOrderdfT[,'MIR155HG'],group=nmf$group)
head(plotdf)
plotF <- function(gene){
library(ggpubr)
library(ggsci)
plotdf <- data.frame(fpkm=log2(fpkmgenesorderdfT[,gene]+1),beta=cgBetaOrderdfT[,gene],group=nmf$group)
p <- ggplot(data = plotdf, aes(x = beta, y = fpkm,  color = group)) +
geom_point() + geom_smooth(method = lm) +
scale_color_manual(values = c('#FF7400', '#009999'))  +
labs(title = gene) +
theme_bw() + theme(plot.title = element_text(hjust = 0.5)) +
stat_cor(method = 'pearson', aes(x = beta, y = fpkm,  color = group))
ggsave(p,filename = paste0(gene,"correlation.pdf"))
my_comparisons <- list( c("Exhausted", "Rest"))
p=ggboxplot(plotdf, x = "group",y =fpkm,color = "group", palette = "jco",ylab = "Expression", add = "jitter",add.params = list(size = 0.1, jitter = 0.2))+
scale_color_jama()
p1=p+stat_compare_means(comparisons = my_comparisons)
ggsave(p,filename = paste0(gene,"fpkm_boxplot.pdf"))
# p=ggboxplot(plotdf, x = "group",y = 'fpkm',combine = TRUE,color = "group",ylab = "log2(FPKM+1)", add = "jitter",add.params = list(size = 0.1, jitter = 0.2),fill = "group")
#
# p1=p+stat_compare_means(comparisons = my_comparisons,label = "p.signif")
}
plotF('MIR155HG')
library(Seurat)
sce <- readRDS('sceList.integrated_step2.RDS')
getwd()
library(Seurat)
setwd("C:/Users/YML/Desktop/shiny/myapp/immune")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
？navlistPanel
?navlistPanel
runApp()
runApp()
runApp()
runApp()
runApp()
?dashboardPage
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('echarts4r')
devtools::install_github("JohnCoene/echarts4r")
installed.packages()
library(shiny)
devtools::install_github("JohnCoene/echarts4r")
install.packages('devtools')
install.packages('shiny')
install.packages('shinythemes')
install.packages('DT')
install.packages('ggplot2')
install.packages('ggsci')
install.packages('plotly')
install.packages('ggsignif')
install.packages('data.table')
install.packages('survival')
install.packages('survminer')
install.packages('echarts4r')
install.packages('ECharts2Shiny')
library(echarts4r)
df <- data.frame(
grp = c("A", "A", "A", "B", "B", "B"),
labels = rep(LETTERS[1:3], 2),
values = runif(6, 1, 5)
)
df
df |>
group_by(grp) |>
e_charts(labels, timeline = TRUE) |>
e_pie(values)
df |>
group_by(grp) |>
e_charts(labels, timeline = TRUE) |>
e_pie(values)
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb)
library(echarts4r)
library(tidyverse)
df <- mtcars %>%
rownames_to_column('model')
library(dplyr)
df <- mtcars %>%
rownames_to_column('model')
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
library(dplyr)
df <- mtcars %>%
rownames_to_column('model')
df %>% e_charts(x = model) %>%
e_line(serie = mpg)
library(echarts4r)
library(tidyverse)
library(dplyr)
df <- mtcars %>%
rownames_to_column('model')
df %>% e_charts(x = model) %>%
e_line(serie = mpg)
library(echarts4r)
library(tidyverse)
library(dplyr)
df <- mtcars %>%
rownames_to_column('model')
df %>% e_charts(x = model) %>%
e_line(serie = mpg)
df
mtcars
library(data.table)
remotes::install_github("JohnCoene/echarts4r")
library(recharts)
library(shiny)
app = shinyApp(
ui = fluidPage(eChartOutput('myChart')),
server = function(input, output) {
output$myChart = renderEChart({
chart = echartr(data.frame(x = rnorm(100), y = rnorm(100)), x, y)
chart})
}
)
if (interactive()) print(app)
?renderEChart
runApp()
install.packages('shinycssloaders')
install.packages('shinydisconnect')
install.packages('ECharts2Shiny')
install.packages('shinydashboard')
runApp()
runApp()
runApp()
clindat <- fread('./data/Clindat.xls')
clindat$gender
table(clindat$gender)
as.data.frame(table(clindat$gender))
df=as.data.frame(table(clindat$gender))
echartr(df, Var1, freq, type='pie')
echartr(df, Var1, Freq, type='pie')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(clindat)
table(clindat$ajcc_pathologic_stage)
as.data.frame(table(clindat$ajcc_pathologic_stage))
df = as.data.frame(table(clindat$ajcc_pathologic_stage))
runApp()
runApp()
install.packages('GSVA')
install.packages("BiocManager")
BiocManager::install("GSVA")
BiocManager::install("ComplexHeatmap")
runApp()
runApp()
runApp()
runApp()
dev.off()
dev.off()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
